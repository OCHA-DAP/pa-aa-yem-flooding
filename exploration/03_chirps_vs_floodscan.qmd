---
title: "floodscan_vs_chirps_admin"
format: html
editor: visual
---

**Note:** This notebook contains some exploratory analysis to better understand the data sets. It is not currently being used in the pipeline or for any outputs, but we may return to it and adopt some code later on.

# Flood Scan vs Chirps

The notebook offers a first look at/exploration of:

1.  chirps vs floodscan. However, both dataset are aggregated to admin zones which we realized later is not ideal.
2.  cccm data - some exploration to understand how the data is structured and what variables might be important
3.  looking into a way to load and use floodscan in R - so far unsuccessful

```{r}
library(tidyverse)
library(lubridate) # dates
library(sf)
library(janitor)
library(gghdx)
library(readxl)
library(extRemes)
library(sysfonts)
library(here)

font_add_google("Source Sans Pro")
showtext::showtext_auto()


cod_db_fp <- file.path(
  Sys.getenv("AA_DATA_DIR"),
  "public", "raw", "yem", "cod_ab", "yem_cod.gpkg"
)

adm <- st_layers(cod_db_fp)$name %>%
  map(
    ~ st_read(cod_db_fp, layer = .x) %>%
      clean_names()
  ) %>%
  set_names(st_layers(cod_db_fp)$name)

adm0 <- adm$yem_admbnda_adm0_govyem_cso_20191002
adm1 <- adm$yem_admbnda_adm1_govyem_cso_20191002
adm2 <- adm$yem_admbnda_adm2_govyem_cso_20191002

chirps_zs_dir <- file.path(
  Sys.getenv("AA_DATA_DIR"),
  "public",
  "processed",
  "yem",
  "chirps_zonal"
)

floodscan_zs_dir <- file.path(
  Sys.getenv("AA_DATA_DIR"),
  "private",
  "processed",
  "yem",
  "floodscan"
)

floodscan_files <- list.files(floodscan_zs_dir, full.names = T) %>%
  set_names(list.files(floodscan_zs_dir))

chirps_files <- list.files(chirps_zs_dir, full.names = T) %>% set_names(list.files(chirps_zs_dir))

chirps_ts <- chirps_files %>%
  map(
    ~ read_csv(.x) %>%
      clean_names() %>%
      rename_with(
        .cols = matches("*mean*|*min$|*max*|*sum*|*stdev*|*median*"), ~ paste0("chirps_", .x)
      )
  )



fs_ts <- floodscan_files %>%
  map(
    ~ read_csv(.x)
  )

fs_ts <- fs_ts %>%
  map(~ .x %>%
    clean_names() %>%
    rename_with(.cols = matches("adm\\d"), ~ str_replace(.x, "_", "")) %>%
    rename(date = "time"))

fs_chirps_adm0 <- fs_ts$floodscan_stats_ADM0_PCODE.csv %>%
  left_join(chirps_ts$chirps_daily_stats_ADM0_PCODE.csv)

chirps_ts$chirps_daily_stats_ADM1_PCODE.csv %>% count(admin1pcode)


# form the photo shared of YEM it should not have all pcodes covered by floodscan
fs_ts$floodscan_stats_ADM1_PCODE.csv %>%
  distinct(adm1pcode, count) %>%
  ggplot(aes(x = adm1pcode, y = count)) +
  geom_bar(stat = "identity") +
  coord_flip()


# I can tell from the pic of flood scan coverage that theese are not covered...
```

plot some flood scan vs chirps. This data is aggregated at the national level in both floodscan and chirps. This is probably not ideal

interesting... are the very low values noise in the floodscan?

```{r}
fs_chirps_adm0 %>%
  ggplot(aes(x = chirps_median, y = mean)) +
  geom_point() +
  labs(x = "median rainfall (mm)", y = "mean flood fraction")


fs_chirps_adm0 %>%
  ggplot(aes(x = chirps_rollsum10_mean, y = mean)) +
  geom_point() +
  labs(x = "max rainfall (mm)", y = "mean flood fraction")

fs_chirps_adm0 %>%
  ggplot(aes(x = chirps_rollsum10_mean, y = sum)) +
  geom_point() +
  labs(x = "10-day rolling sum average (mm)", y = "Sum flood fraction")

fs_chirps_adm0 %>%
  ggplot(aes(x = chirps_rollsum10_max, y = sum)) +
  geom_point() +
  labs(x = "10-day rolling sum max (mm)", y = "Sum flood fraction")

fs_chirps_adm0 %>%
  ggplot(aes(x = chirps_rollsum10_max, y = mean)) +
  geom_point(alpha = 0.1) +
  scale_x_log10() +
  scale_y_log10(labels = scales::percent) +
  labs(x = "10-day rolling sum max (mm)", y = "Sum flood fraction")
```

Now at the admin 1 level

```{r}
# filter(!adm1pcode %in% c("YE21","YE19","YE28")
fs_chirps_adm1 <- fs_ts$floodscan_stats_ADM1_PCODE.csv %>%
  left_join(chirps_ts$chirps_daily_stats_ADM1_PCODE.csv,
    by = c(
      "date" = "date",
      "adm1pcode" = "admin1pcode"
    )
  ) %>%
  left_join(
    adm1 %>%
      st_drop_geometry() %>%
      select(adm1_pcode, adm1_en),
    by = c("adm1pcode" = "adm1_pcode")
  )


line_tbl <- fs_chirps_adm1 %>%
  group_by(adm1pcode, adm1_en) %>%
  summarise(
    mean = mean(chirps_rollsum10_max, na.rm = T),
    median = median(chirps_rollsum10_max, na.rm = T), .groups = "drop"
  )

fs_chirps_adm1 %>%
  filter(month(date) %in% c(3, 4, 5, 6)) %>%
  ggplot(aes(x = chirps_rollsum10_max, y = mean)) +
  geom_point(alpha = 0.1) +
  geom_vline(data = line_tbl, aes(xintercept = median), linetype = "dashed", color = "red") +
  scale_x_log10(labels = scales::comma) +
  scale_y_log10(labels = scales::percent) +
  facet_wrap(~adm1_en, scales = "free") +
  labs(
    x = "Precipitation (mm) 10 day rolling sum (CHIRPS)",
    y = "Mean Flood Fraction (FLOODSCAN)",
    title = "Precipitation 10 day rolling sum vs mean flood fraction",
    subtitle = "Yemen: March-June (1998-2022)",
    caption = "10 day rolling sum aggregated spatially to admin 1 by maximum value. Red line represents median 10 day precip value.\nNOTE: admins without FLOODSCAN coverage should be removed"
  ) +
  theme(
    plot.caption = element_text(hjust = 0)
  )
fs_chirps_adm1 %>%
  ggplot(aes(x = chirps_rollsum10_max, y = mean)) +
  # geom_density_2d_filled()+
  # geom_density2d()+
  geom_hex() +
  scale_fill_continuous(type = "viridis") +
  geom_vline(data = line_tbl, aes(xintercept = median), linetype = "dashed", color = "red") +
  scale_x_log10(labels = scales::comma) +
  scale_y_log10(labels = scales::percent) +
  facet_wrap(~adm1_en, scales = "free") +
  labs(
    x = "Precipitation (mm) 10 day rolling sum (CHIRPS)",
    y = "Mean Flood Fraction (FLOODSCAN)",
    title = "Precipitation 10 day rolling sum vs mean flood fraction",
    subtitle = "Yemen (1998-2022)",
    caption = "10 day rolling sum aggregated spatially to admin 1 by maximum value. Red line represents median 10 day precip value.\nNOTE: admins without FLOODSCAN coverage should be removed"
  ) +
  theme(
    plot.caption = element_text(hjust = 0)
  )


fs_chirps_adm1 %>%
  mutate(sum_div_count = sum / count, .after = count) %>%
  ggplot(aes(x = chirps_rollsum10_max, y = sum)) +
  geom_point() +
  geom_vline(
    data = line_tbl, aes(xintercept = median),
    linetype = "dashed",
    color = "red"
  ) +
  scale_x_log10(labels = scales::comma) +
  scale_y_log10(labels = scales::percent) +
  facet_wrap(~adm1_en, scales = "free") +
  labs(
    x = "Precipitation (mm) 10 day rolling sum (CHIRPS)",
    y = "Sum Flood Fraction (FLOODSCAN)",
    title = "Precipitation 10 day rolling sum vs mean flood fraction",
    subtitle = "Yemen (1998-2022)",
    caption = "10 day rolling sum aggregated spatially to admin 1 by maximum value. Red line represents median 10 day precip value.\nNOTE: admins without FLOODSCAN coverage should be removed"
  ) +
  theme(
    plot.caption = element_text(hjust = 0)
  )




fs_chirps_adm1 %>%
  filter(chirps_rollsum10_max >= 5) %>%
  ggplot(aes(x = chirps_rollsum10_max, y = mean)) +
  geom_point() +
  scale_x_log10(labels = scales::comma) +
  scale_y_log10(labels = scales::percent) +
  facet_wrap(~adm1pcode, scales = "free")
```

A first look at return periods

```{r}
yearly_max_chirps <- chirps_ts$chirps_daily_stats_ADM0_PCODE.csv %>%
  group_by(yr = year(date)) %>%
  summarise(
    max_daily_mean = max(chirps_mean, na.rm = T),
    max_roll10_mean = max(chirps_rollsum10_mean, na.rm = T)
  )


fs_chirps_adm1 %>%
  distinct(adm1_en, adm1pcode) %>%
  print(n = nrow(.))
sanaa <- fs_chirps_adm1 %>%
  group_by(adm1pcode, yr = year(date)) %>%
  summarise(
    max_daily_mean = max(chirps_mean, na.rm = T),
    max_roll10_mean = max(chirps_rollsum10_mean, na.rm = T)
  ) %>%
  filter(adm1pcode == "YE23")

fit_chirps_daily <- fevd(yearly_max_chirps$max_daily_mean, type = "GEV")
fit_chirps_10d <- fevd(yearly_max_chirps$max_roll10_mean, type = "GEV")
fit_chirps_sannaa_10d <- fevd(sanaa$max_roll10_mean, type = "GEV")


plot(fit_chirps_daily)
plot(fit_chirps_10d)
```

# Rainfall vs affected

```{r}
cccm_new_fp <- file.path(
  Sys.getenv("AA_DATA_DIR"),
  "private",
  "exploration",
  "yem",
  "Yemen -  CCCM Cluster -December ML - Flooding available data.xlsx"
)
cccm_new_sheet_names <- excel_sheets(cccm_new_fp)


ss_skip_vals <- c(1, rep(0, 3))
cccm_new <- dfs <- cccm_new_sheet_names %>%
  map2(
    .y = ss_skip_vals,
    ~ read_excel(cccm_new_fp, sheet = .x, skip = .y) %>%
      clean_names()
  ) %>%
  set_names(cccm_new_sheet_names)

cm_flood <- cccm_new$`CCCM FLOOD REPORT IN IDP SITES`

cm_flood <- cm_flood %>% select(date_of_episode,
  num_init_hhs = initial_figures_h_hs,
  num_verified_hhs = verified_figures_h_hs,
  num_shelters_affefcted = how_many_shelters_were_affected,
  num_hhs_lost_documentation = if_yes_how_many_h_hs_did_they_lose_their_personal_legal_documentations_due_to_the_flooding,
  everything()
)


cm_flood_natl <- cm_flood %>%
  group_by(date_of_episode) %>%
  summarise(
    across(.cols = starts_with("num_"), ~ sum(.x, na.rm = T))
  )
```

```{r}
fs_chirps_cm <- fs_chirps_adm0 %>%
  filter(year(date) %in% c(2021, 2022)) %>%
  left_join(cm_flood_natl, by = c("date" = "date_of_episode"))

fs_chirps_cm %>%
  ggplot(aes(x = chirps_rollsum10_mean, y = num_shelters_affefcted)) +
  geom_point() +
  scale_y_sqrt() +
  scale_x_sqrt() +
  labs(
    x = "precip rolling sum avg (mm)", y = "# shelters affected (CCCM db)",
    title = "Precipitation vs number of shelters affected by flooding"
  ) +
  theme_hdx()


fs_chirps_cm %>%
  ggplot(aes(x = mean, y = num_shelters_affefcted)) +
  geom_point() +
  scale_y_log10() +
  scale_x_log10()
```
